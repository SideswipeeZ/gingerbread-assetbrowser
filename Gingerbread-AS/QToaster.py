from Qt import QtCore, QtGui, QtWidgets
import sys, base64
from qt_material import apply_stylesheet


class QToaster(QtWidgets.QFrame):
	closed = QtCore.Signal()

	def __init__(self, *args, **kwargs):
		super(QToaster, self).__init__(*args, **kwargs)
		QtWidgets.QHBoxLayout(self)

		self.setSizePolicy(QtWidgets.QSizePolicy.Maximum,
		                   QtWidgets.QSizePolicy.Maximum)

		self.setStyleSheet("background-color: transparent;")
		# self.setStyleSheet('''
		#     QToaster {
		#         border: 1px solid black;
		#         border-radius: 4px;
		#         background: palette(window);
		#         background-color: rgb(74, 160, 85);
		#     }
		# ''')
		# alternatively:
		# self.setAutoFillBackground(True)
		# self.setFrameShape(self.Box)

		self.timer = QtCore.QTimer(singleShot=True, timeout=self.hide)
		self.timer2 = QtCore.QTimer(singleShot=True)

		if self.parent():
			self.opacityEffect = QtWidgets.QGraphicsOpacityEffect(opacity=0)
			self.setGraphicsEffect(self.opacityEffect)
			self.opacityAni = QtCore.QPropertyAnimation(self.opacityEffect, b'opacity')
			# we have a parent, install an eventFilter so that when it's resized
			# the notification will be correctly moved to the right corner
			self.parent().installEventFilter(self)
		else:
			# there's no parent, use the window opacity property, assuming that
			# the window manager supports it; if it doesn't, this won'd do
			# anything (besides making the hiding a bit longer by half a second)
			self.opacityAni = QtCore.QPropertyAnimation(self, b'windowOpacity')
		self.opacityAni.setStartValue(0.)
		self.opacityAni.setEndValue(1.)
		self.opacityAni.setDuration(100)
		self.opacityAni.finished.connect(self.checkClosed)

		self.corner = QtCore.Qt.TopLeftCorner
		self.margin = 10

		self.icons = self.getIcons()
		self.color_dict = {"success": "74, 160, 85", "alert": "224, 148, 73", "info": "62, 170, 198",
		                   "error": "199, 66, 69"}

	def checkClosed(self):
		# if we have been fading out, we're closing the notification
		if self.opacityAni.direction() == self.opacityAni.Backward:
			self.close()

	def getIcons(self):
		self.IconGreen = "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"
		self.IconOrange = ""
		self.IconBlue = ""
		self.IconRed = ""

		self.IconPixGreen = QtGui.QPixmap()
		self.IconPixGreen.loadFromData(base64.b64decode(self.IconGreen))
		self.IconPixGreen = self.IconPixGreen.scaled(QtCore.QSize(40, 40), QtCore.Qt.AspectRatioMode.KeepAspectRatio,
		                                             QtCore.Qt.SmoothTransformation)

		self.IconPixOrange = QtGui.QPixmap()
		self.IconPixOrange.loadFromData(base64.b64decode(self.IconOrange))
		self.IconPixOrange = self.IconPixOrange.scaled(QtCore.QSize(40, 40), QtCore.Qt.AspectRatioMode.KeepAspectRatio,
		                                               QtCore.Qt.SmoothTransformation)

		self.IconPixBlue = QtGui.QPixmap()
		self.IconPixBlue.loadFromData(base64.b64decode(self.IconBlue))
		self.IconPixBlue = self.IconPixBlue.scaled(QtCore.QSize(40, 40), QtCore.Qt.AspectRatioMode.KeepAspectRatio,
		                                           QtCore.Qt.SmoothTransformation)

		self.IconPixRed = QtGui.QPixmap()
		self.IconPixRed.loadFromData(base64.b64decode(self.IconRed))
		self.IconPixRed = self.IconPixRed.scaled(QtCore.QSize(40, 40), QtCore.Qt.AspectRatioMode.KeepAspectRatio,
		                                         QtCore.Qt.SmoothTransformation)

		icon_dict = {"success": self.IconPixGreen, "alert": self.IconPixOrange, "info": self.IconPixBlue,
		             "error": self.IconPixRed}
		return icon_dict

	def restore(self):
		# this is a "helper function", that can be called from mouseEnterEvent
		# and when the parent widget is resized. We will not close the
		# notification if the mouse is in or the parent is resized
		self.timer.stop()
		self.timer2.stop()
		# also, stop the animation if it's fading out...
		self.opacityAni.stop()
		# ...and restore the opacity
		if self.parent():
			self.opacityEffect.setOpacity(1)
		else:
			self.setWindowOpacity(1)

	def hide(self):
		# start hiding
		self.opacityAni.setDirection(self.opacityAni.Backward)
		self.opacityAni.setDuration(500)
		self.opacityAni.start()

	def eventFilter(self, source, event):
		if source == self.parent() and event.type() == QtCore.QEvent.Resize:
			self.opacityAni.stop()
			parentRect = self.parent().rect()
			geo = self.geometry()
			if self.corner == QtCore.Qt.TopLeftCorner:
				geo.moveTopLeft(
					parentRect.topLeft() + QtCore.QPoint(self.margin, self.margin))
			elif self.corner == QtCore.Qt.TopRightCorner:
				geo.moveTopRight(
					parentRect.topRight() + QtCore.QPoint(-self.margin, self.margin))
			elif self.corner == QtCore.Qt.BottomRightCorner:
				geo.moveBottomRight(
					parentRect.bottomRight() + QtCore.QPoint(-self.margin, -self.margin))
			else:
				geo.moveBottomLeft(
					parentRect.bottomLeft() + QtCore.QPoint(self.margin, -self.margin))
			self.setGeometry(geo)
			self.restore()
			self.timer.start()
			self.timer2.start()
		return super(QToaster, self).eventFilter(source, event)

	def enterEvent(self, event):
		self.restore()

	def leaveEvent(self, event):
		self.timer.start()
		self.timer2.start()

	def closeEvent(self, event):
		# we don't need the notification anymore, delete it!
		self.deleteLater()

	def resizeEvent(self, event):
		super(QToaster, self).resizeEvent(event)
		# if you don't set a stylesheet, you don't need any of the following!
		if not self.parent():
			# there's no parent, so we need to update the mask
			path = QtGui.QPainterPath()
			path.addRoundedRect(QtCore.QRectF(self.rect()).translated(-.5, -.5), 4, 4)
			self.setMask(QtGui.QRegion(path.toFillPolygon(QtGui.QTransform()).toPolygon()))
		else:
			self.clearMask()

	def updateGrad(self):
		# check if timer1 is still active
		if self.timer.isActive():
			self.timer2.setInterval(60)
			self.timeVal = (abs((((self.timeout / 99.0) * 2) - 1) / 100)) - 0.01
			self.timeout = self.timeout - 60
			# print(self.timeVal)
			self.lbl_grad.setStyleSheet(
				u"background-color: qlineargradient(spread:reflect, x1:0.5, y1:1, x2:1, y2:1, stop:" + str(
					self.timeVal) + " "+"rgba("+self.colourFrame+ ", 255)"+", stop:1 rgba(255, 255, 255, 255));\nborder-radius: 2px;\nborder-color: "+"rgb("+self.colourFrame+ ")"+";")
			self.repaint()
			self.timer2.start()

	@staticmethod
	def showMessage(parent, message,
	                iconType="info", head_label="", colour="",
	                corner=QtCore.Qt.BottomRightCorner, margin=10, closable=True,
	                timeout=5000, desktop=False, parentWindow=True, animated=False):

		if parent and parentWindow:
			parent = parent.window()

		if not parent or desktop:
			self = QToaster(None)
			self.setWindowFlags(self.windowFlags() | QtCore.Qt.FramelessWindowHint |
			                    QtCore.Qt.BypassWindowManagerHint)
			# This is a dirty hack!
			# parentless objects are garbage collected, so the widget will be
			# deleted as soon as the function that calls it returns, but if an
			# object is referenced to *any* other object it will not, at least
			# for PyQt (I didn't test it to a deeper level)
			self.__self = self

			currentScreen = QtWidgets.QApplication.primaryScreen()
			if parent and parent.window().geometry().size().isValid():
				# the notification is to be shown on the desktop, but there is a
				# parent that is (theoretically) visible and mapped, we'll try to
				# use its geometry as a reference to guess which desktop shows
				# most of its area; if the parent is not a top level window, use
				# that as a reference
				reference = parent.window().geometry()
			else:
				# the parent has not been mapped yet, let's use the cursor as a
				# reference for the screen
				reference = QtCore.QRect(
					QtGui.QCursor.pos() - QtCore.QPoint(1, 1),
					QtCore.QSize(3, 3))
			maxArea = 0
			for screen in QtWidgets.QApplication.screens():
				intersected = screen.geometry().intersected(reference)
				area = intersected.width() * intersected.height()
				if area > maxArea:
					maxArea = area
					currentScreen = screen
			parentRect = currentScreen.availableGeometry()
		else:
			self = QToaster(parent)
			parentRect = parent.rect()

		self.timer.setInterval(timeout)
		if animated:
			self.timer2.setInterval(60)
		self.timeout = timeout
		if animated:
			self.timer2.timeout.connect(self.updateGrad)

		# Set Colours Here
		self.colourFrame = self.color_dict.get(iconType, "info")
		if colour:
			self.colourFrame = colour

		###
		self.frame_toast = QtWidgets.QFrame()
		self.frame_toast.setObjectName(u"frame_toast")
		self.frame_toast.setGeometry(QtCore.QRect(10, 10, 330, 71))
		self.frame_toast.setMinimumSize(QtCore.QSize(300, 70))
		self.frame_toast.setMaximumSize(QtCore.QSize(300, 70))
		self.frame_toast.setStyleSheet(
			"background-color: qlineargradient(spread:pad, x1:0.0, y1:0.0, x2:1.0, y2:0.0, stop:0 "+"rgba("+self.colourFrame+ ", 255)"+", stop:1 rgba(255, 255, 255, 255));\nbackground-color: rgb(255, 255, 255);\nborder-radius: 8px;\nborder: rgb(120, 120, 120);")

		self.frame_toast.setFrameShape(QtWidgets.QFrame.StyledPanel)
		self.frame_toast.setFrameShadow(QtWidgets.QFrame.Raised)
		self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.frame_toast)
		self.verticalLayout_15.setSpacing(0)
		self.verticalLayout_15.setObjectName(u"verticalLayout_15")
		self.verticalLayout_15.setContentsMargins(5, 4, 5, 0)
		self.hl_main = QtWidgets.QHBoxLayout()
		self.hl_main.setSpacing(10)
		self.hl_main.setObjectName(u"hl_main")
		self.vl_ico = QtWidgets.QVBoxLayout()
		self.vl_ico.setSpacing(0)
		self.vl_ico.setObjectName(u"vl_ico")
		self.vs_ico_top = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)

		self.vl_ico.addItem(self.vs_ico_top)

		self.lbl_icon = QtWidgets.QLabel(self.frame_toast)
		self.lbl_icon.setObjectName(u"lbl_icon")
		self.lbl_icon.setMinimumSize(QtCore.QSize(40, 40))
		self.lbl_icon.setMaximumSize(QtCore.QSize(40, 40))
		self.lbl_icon.setStyleSheet(u"background-color: "+"rgb("+self.colourFrame+ ")"+";\n"
		                            "border-radius: 20px;")
		self.lbl_icon.setScaledContents(True)
		self.lbl_icon.setAlignment(QtCore.Qt.AlignCenter)

		self.vl_ico.addWidget(self.lbl_icon)

		self.vs_ico_bottom = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum,
		                                           QtWidgets.QSizePolicy.Expanding)

		self.vl_ico.addItem(self.vs_ico_bottom)

		self.hl_main.addLayout(self.vl_ico)

		self.vl_mid = QtWidgets.QVBoxLayout()
		self.vl_mid.setSpacing(0)
		self.vl_mid.setObjectName(u"vl_mid")
		self.lbl_header = QtWidgets.QLabel(self.frame_toast)
		self.lbl_header.setObjectName(u"lbl_header")
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Maximum)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.lbl_header.sizePolicy().hasHeightForWidth())
		self.lbl_header.setSizePolicy(sizePolicy)
		font = QtGui.QFont()
		font.setPointSize(14)
		self.lbl_header.setFont(font)
		self.lbl_header.setStyleSheet(u"color:"+"rgb("+self.colourFrame+ ")"+";\n"
		                              "background-color: transparent;")

		self.vl_mid.addWidget(self.lbl_header)

		self.lbl_info = QtWidgets.QLabel(self.frame_toast)
		self.lbl_info.setObjectName(u"lbl_info")
		self.lbl_info.setStyleSheet(u"color:"+"rgb("+self.colourFrame+ ")"+";\n"
		                            "background-color: transparent;")
		self.lbl_info.setWordWrap(True)

		self.vl_mid.addWidget(self.lbl_info)

		self.vs_mid_bottom = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum,
		                                           QtWidgets.QSizePolicy.Preferred)

		self.vl_mid.addItem(self.vs_mid_bottom)

		self.hl_main.addLayout(self.vl_mid)

		self.vl_close = QtWidgets.QVBoxLayout()
		self.vl_close.setObjectName(u"vl_close")
		self.bttn_close = QtWidgets.QPushButton(self.frame_toast)
		self.bttn_close.setObjectName(u"bttn_close")
		sizePolicy1 = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
		sizePolicy1.setHorizontalStretch(0)
		sizePolicy1.setVerticalStretch(0)
		sizePolicy1.setHeightForWidth(self.bttn_close.sizePolicy().hasHeightForWidth())
		self.bttn_close.setSizePolicy(sizePolicy1)
		self.bttn_close.setMinimumSize(QtCore.QSize(30, 30))
		self.bttn_close.setMaximumSize(QtCore.QSize(30, 30))
		font1 = QtGui.QFont()
		font1.setPointSize(10)
		self.bttn_close.setFont(font1)
		self.bttn_close.setStyleSheet(u"QPushButton{\n"
		                              "	color: rgb(66, 66, 66);\n"
		                              "	background-color: transparent;\n"
		                              "	border-radius: 15px;\n"
		                              "}\n"
		                              "QPushButton:hover{\n"
		                              "	color: rgb(255, 255, 255);\n"
		                              "	background-color:"+"rgb("+self.colourFrame+ ")"+";\n"
		                              "	border-radius: 15px;\n"
		                              "}\n"
		                              "")

		self.vl_close.addWidget(self.bttn_close)

		self.vs_close_bottom = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum,
		                                             QtWidgets.QSizePolicy.Expanding)

		self.vl_close.addItem(self.vs_close_bottom)

		self.hl_main.addLayout(self.vl_close)

		self.verticalLayout_15.addLayout(self.hl_main)

		self.lbl_grad = QtWidgets.QLabel(self.frame_toast)
		self.lbl_grad.setObjectName(u"lbl_grad")
		self.lbl_grad.setMinimumSize(QtCore.QSize(0, 4))
		self.lbl_grad.setMaximumSize(QtCore.QSize(16777215, 10))
		self.lbl_grad.setStyleSheet(
			u"background-color: qlineargradient(spread:pad, x1:0.0, y1:0.0, x2:1.0, y2:0.0, stop:0 "+"rgba("+self.colourFrame+ ", 255)"+", stop:1 rgba(255, 255, 255, 255));\n"
			"background-color: qlineargradient(spread:reflect, x1:0.5, y1:1, x2:1, y2:1, stop:0 "+"rgba("+self.colourFrame+ ", 255)"+", stop:1 rgba(255, 255, 255, 255));\n"
			"border-radius: 2px;\n"
			"border-color: "+"rgb("+self.colourFrame+ ")"+";")
		self.lbl_grad.setAlignment(QtCore.Qt.AlignCenter)

		self.verticalLayout_15.addWidget(self.lbl_grad)
		###

		# use Qt standard icon pixmaps; see:
		# https://doc.qt.io/qt-5/qstyle.html#StandardPixmap-enum
		################

		labelIcon = self.lbl_icon
		icon = self.icons.get(iconType, "info")
		# icon = self.style().standardIcon(icon)
		# size = self.style().pixelMetric(QtWidgets.QStyle.PM_SmallIconSize)
		labelIcon.setPixmap(icon)

		self.label = self.lbl_info
		self.lbl_header.setText(iconType.capitalize())
		self.lbl_info.setText(message)
		self.layout().setContentsMargins(0, 0, 0, 0)
		self.layout().setSpacing(0)
		self.layout().addWidget(self.frame_toast)

		if closable:
			self.closeButton = self.bttn_close
			self.closeButton.setText("X")
			self.closeButton.show()
			# closeIcon = self.style().standardIcon(QtWidgets.QStyle.SP_TitleBarCloseButton)
			# self.closeButton.setIcon(closeIcon)
			self.closeButton.clicked.connect(self.close)
		else:
			self.closeButton = self.bttn_close
			self.closeButton.hide()
		##################################
		self.timer.start()
		self.timer2.start()

		# raise the widget and adjust its size to the minimum
		self.raise_()
		self.adjustSize()

		self.corner = corner
		self.margin = margin

		geo = self.geometry()
		# now the widget should have the correct size hints, let's move it to the
		# right place
		if corner == QtCore.Qt.TopLeftCorner:
			geo.moveTopLeft(
				parentRect.topLeft() + QtCore.QPoint(margin, margin))
		elif corner == QtCore.Qt.TopRightCorner:
			geo.moveTopRight(
				parentRect.topRight() + QtCore.QPoint(-margin, margin))
		elif corner == QtCore.Qt.BottomRightCorner:
			geo.moveBottomRight(
				parentRect.bottomRight() + QtCore.QPoint(-margin, -margin))
		else:
			geo.moveBottomLeft(
				parentRect.bottomLeft() + QtCore.QPoint(margin, -margin))

		self.setGeometry(geo)
		self.show()
		self.opacityAni.start()


class W(QtWidgets.QWidget):
	def __init__(self):
		QtWidgets.QWidget.__init__(self)
		layout = QtWidgets.QVBoxLayout(self)

		toasterLayout = QtWidgets.QHBoxLayout()
		layout.addLayout(toasterLayout)

		self.textEdit = QtWidgets.QLineEdit('Some Long String of Useful Info Probably!')
		toasterLayout.addWidget(self.textEdit)

		self.cornerCombo = QtWidgets.QComboBox()
		toasterLayout.addWidget(self.cornerCombo)
		for pos in ('BottomRight', 'TopLeft', 'TopRight', 'BottomLeft'):
			corner = getattr(QtCore.Qt, '{}Corner'.format(pos))
			self.cornerCombo.addItem(pos, corner)

		self.icontypeCombo = QtWidgets.QComboBox()
		toasterLayout.addWidget(self.icontypeCombo)
		for i in ("success", "info", "alert", "error"):
			self.icontypeCombo.addItem(i)

		self.windowBtn = QtWidgets.QPushButton('Show window toaster')
		toasterLayout.addWidget(self.windowBtn)
		self.windowBtn.clicked.connect(self.showToaster)

		self.screenBtn = QtWidgets.QPushButton('Show desktop toaster')
		toasterLayout.addWidget(self.screenBtn)
		self.screenBtn.clicked.connect(self.showToaster)

		# a random widget for the window
		layout.addWidget(QtWidgets.QTableView())

	def showToaster(self):
		if self.sender() == self.windowBtn:
			parent = self
			desktop = False
		else:
			parent = None
			desktop = True
		corner = QtCore.Qt.Corner(self.cornerCombo.currentData())
		icoType = self.icontypeCombo.currentText()
		QToaster.showMessage(
			parent, self.textEdit.text(), iconType=icoType, corner=corner, desktop=desktop, head_label="Something",
			animated=True)


if __name__ == '__main__':
	app = QtWidgets.QApplication(sys.argv)
	# apply_stylesheet(app,"dark_lightgreen.xml")
	w = W()
	w.show()
	sys.exit(app.exec_())
